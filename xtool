#!/bin/sh

# USAGE: git xtool [--open|-o] <tool>
#  execute the indicated tool, or open the tool file

git rev-parse 2>/dev/null && GIT_TOOLS_LOCAL="$(git rev-parse --show-toplevel 2>/dev/null)/.git/tools"

###

function xtool_list() {
    local _xtool_list=()

    [[ -d "$GIT_TOOLS_LOCAL" ]] && _xtool_list+=( $(\ls "$GIT_TOOLS_LOCAL" 2> /dev/null | grep -v -f "$GIT_TOOLS_LOCAL/.xtool_ignore") )
    _xtool_list+=( $(\ls "$GIT_TOOLS_PATH" 2> /dev/null | grep -v -f "$GIT_TOOLS_PATH/.xtool_ignore") )
    
    _xtool_list=( $(echo "${_xtool_list[@]}" | sort -u) )
    printf '%s\n' "${_xtool_list[@]}"
    return 0
}
function xtool_select() {
    # select _xtool_name if not specified
    local _xtool_list=( $(xtool_list) )

    if command -v fzf >/dev/null
    then
        printf "%s\n" "${_xtool_list[@]}" | fzf --layout=reverse --height $((${#_xtool_list[@]} + 2)) | cut -f1
    else
        COLUMNS=12
        PS3=$'\nWhich tool? '
        select tool in "${_xtool_list[@]}"
        do
            echo "$tool" | cut -f1
            return 0
        done
    fi
}
function xtool_get_path() {
    local _xtool_name=$1

    if [[ -f "$GIT_TOOLS_LOCAL/$_xtool_name" ]]
    then
        echo "$GIT_TOOLS_LOCAL/$_xtool_name"
        return 0
    elif [[ -f "$GIT_TOOLS_PATH/$_xtool_name" ]]
    then
        echo "$GIT_TOOLS_PATH/$_xtool_name"
        return 0
    else
        return 1
    fi
}

###

while (($#))
do
    case $1 in
        --help|-h)
            _xtool_name='help'
            shift
            break
            ;;
        --open|-o)
            _xtool_open=1
            ;;
        --list|-l)
            xtool_list
            exit $?
            ;;
        --path)
            shift
            xtool_get_path $@
            exit $?
            ;;
        --select)
            xtool_select
            exit $?
            ;;
        --)
            shift
            break
            ;;
        --*)
            echo "xtool: invalid argument: $1" >&2
            exit 1
            ;;
        *)
            _xtool_name="$1"
            shift
            break
            ;;
    esac
    shift
done

# select _xtool_name if not specified
[[ -z $_xtool_name ]] && _xtool_name="$(xtool_select)"
[[ -z $_xtool_name ]] && echo "xtool: argument required" >&2 && exit 1

# get top-level for current git
_xtool_path="$(xtool_get_path "$_xtool_name")"
[[ -z $_xtool_path ]] && echo "xtool: No such tool: $_xtool_name" >&2 && exit 1

# open or run the xtool
if (( _xtool_open ))
then
    echo "$_xtool_path"
    $EDITOR "$_xtool_path" "$@"
else
    . $_xtool_path "$@"
fi

