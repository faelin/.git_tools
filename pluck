#!/bin/sh

function usage() {
	cat <<-EOF
	Command line tool to pluck files from any branch or commit within your git repo, and add them to the current working tree.

	USAGE
	    git-pluck [options] [branch] [commit|files...]
	    
	    Cherry-pick the indicated commit or files from the specified branch and add them to the working tree. If a plucked file conflicts with an existing file, changes will be merged. Plucked files are automatically tracked (but not staged).

	        -i,--interactive
	           enters an interactive search utility to visualize changes
	             - if an entire commit is selected, all changes will be shown in diff format
	             - after selecting a commit, specific filestates at that commit can be selected
	               to apply only the changes for that specific file

	        --clean
	          run with a clear cache 
	EOF
	exit 0
}

cache_root='/tmp/git-pluck/cache'
while (( $# ))
do
	case "$1" in
		--help)
			usage
			;;
		--clean|-c)
			if [[ -z "$2" ]]
			then
				target="$(git rev-parse --verify "$2" 2>/dev/null)"
				cache="$cache_root/$(basename `git rev-parse --show-toplevel`)/$(git branch --show-current)/$target"
				rm -rf "$cache"
				shift
			else
				rm -rf "$cache_root/*"
				exit 0
			fi
			;;
		--interactive|-i)
			_git_pluck_interactive=1
			;;
		*)
			target="$(git rev-parse --verify "$1" 2>/dev/null)"
			cache="$cache_root/$(basename `git rev-parse --show-toplevel`)/$(git branch --show-current)/$target"
			;;
	esac
	shift
done

[ -z "$target" ] && echo "error: pathspec '$1' did not match any destination known to git" && return 1  # fail fast

mkdir -p "$cache" # /tmp/git-pluck/{repo}/{branch}/{target}

index="$(git diff-index --diff-filter=a --find-copies --find-renames --summary "$target")"
if [ ! -f "$cache/files" ] || [ ! -f "$cache/index" ] || [[ $(< "$cache/index") != "$index" ]]; then
	echo $index > "$cache/index"
	printf "%s\n" "$(echo $index | perl -pe 's/^ (?:(?:rename|copy) ((.*?){)?(.+?) => (.+)(?(1)}(.*)|) \(\d+%\)|\w+ mode \d+ (.*))$/$6\t$2$3$5\t$2$4$5/;')" > "$cache/files"
fi

selected=( $( echo "$index" | fzf -m --preview "git diff $target --color=always -- \$( sed \"\$(( {n} + 1 ))q;d\" '$cache/files' )" ) ) || return 1
# fail if fzf was interrupted/exited

echo "restored:"
for line in "$selected";
do
	file="$( sed "$(awk 'match($0,v){print NR; exit}' v=$line "$cache/index")q;d" "$cache/files" | cut -f1 )"
	git restore --source="$target" --merge -- "$file"
	git add -N "$file"
	echo "  $file"
done

